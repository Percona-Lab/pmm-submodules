name: UI tests
on:
  workflow_call:
    inputs:
      server_image:
        description: "pmm-server docker image, default perconalab/pmm-server:dev-latest"
        required: false
        type: string
      client_version:
        description: "pmm2-client version Tarball or Dev-latest, default is dev-latest"
        required: false
        type: string
      client_image:
        description: "pmm2-client docker image, default perconalab/pmm-client:dev-latest"
        required: false
        type: string
      pmm_qa_branch:
        description: "Branch for PMM-QA to checkout"
        required: false
        type: string
      pmm_ui_branch:
        description: "Branch for PMM-UI tests to checkout"
        required: false
        type: string
      sha:
        description: "SHA (leave empty if running manually, default - 'null')"
        required: false
        type: string
      client_flags:
        description: "example: --addclient=ps,1 --ps-version=5.7"
        required: false
        type: string
      tags_for_tests:
        description: "example: @settings-fb"
        required: true
        type: string

jobs:
  ui-tests-e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      SERVER_IMAGE: ${{ inputs.server_image || 'perconalab/pmm-server:dev-latest' }}
      CLIENT_IMAGE: ${{ inputs.client_image || 'perconalab/pmm-client:dev-latest' }}
      CLIENT_VERSION: ${{ inputs.client_version || 'dev-latest' }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ADMIN_PASSWORD: 'admin-password'
      PMM_QA_BRANCH: ${{ inputs.pmm_qa_branch || 'main' }}
      PMM_QA_GIT_BRANCH: ${{ inputs.pmm_qa_branch || 'main' }}
      PMM_UI_BRANCH: ${{ inputs.pmm_ui_branch || 'main' }}
      DOCKER_VERSION: ${{ inputs.server_image || 'perconalab/pmm-server:dev-latest' }}
      CLIENT_DOCKER_VERSION: ${{ inputs.client_image || 'perconalab/pmm-client:dev-latest' }}
      SHA: ${{ inputs.sha || 'null' }}
      CLIENT_FLAGS: ${{ inputs.client_flags || '' }}
      TAGS_FOR_TESTS: ${{ inputs.tags_for_tests || '@settings-fb' }}

    steps:
      - name: Checkout PMM-UI tests when Workflow_dispatch
        uses: actions/checkout@v3

      - name: Setup tools
        run: |
          npm install -g bats
          sudo apt-get install -y apt-transport-https ca-certificates dirmngr ansible libaio1 libaio-dev libnuma-dev libncurses5 socat sysbench
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 8919F6BD2B48D754
          echo "deb https://packages.clickhouse.com/deb stable main" | sudo tee \
              /etc/apt/sources.list.d/clickhouse.list
          sudo apt-get update
          sudo apt-get install -y clickhouse-client
          sudo curl -s https://raw.githubusercontent.com/datacharmer/dbdeployer/master/scripts/dbdeployer-install.sh | bash
          ls -la
          git clone -b ${{ env.PMM_QA_BRANCH }} https://github.com/percona/pmm-qa
          ls -la
          pushd pmm-qa
          wget https://raw.githubusercontent.com/Percona-QA/percona-qa/master/get_download_link.sh
          chmod +x get_download_link.sh
          popd

      - name: Setup PMM2-Server
        run: |
          PWD=$(pwd) PMM_SERVER_IMAGE=${{ env.DOCKER_VERSION }} docker-compose up -d
          sleep 60
          docker exec pmm-server change-admin-password ${{ env.ADMIN_PASSWORD }}
          bash -x testdata/db_setup.sh

      - name: Setup PMM2-Client
        run: sudo bash -x ./pmm-qa/pmm-tests/pmm2-client-setup.sh --pmm_server_ip 192.168.0.1 --client_version ${{ env.CLIENT_VERSION }} --admin_password ${{ env.ADMIN_PASSWORD }} --use_metrics_mode no

      - name: Run Setup for FB E2E Tests
        run: sudo -E bash -x ./pmm-qa/pmm-tests/pmm-framework.sh ${{ env.CLIENT_FLAGS }} --pmm2

      - name: Setup npm modules for e2e tests
        run: |
          npm install
          npm ci
          envsubst < env.list > env.generated.list

      - name: Execute e2e tests for FB with tags ${{ env.TAGS_FOR_TESTS }}
        env:
          SERVER_IP : "192.168.0.1"
          PMM_UI_URL : "http://192.168.0.1/"
          PMM_URL : "http://admin:${{ env.ADMIN_PASSWORD }}@${{ env.SERVER_IP }}"
        run: |
          sed -i 's+http://localhost/+${PMM_UI_URL}/+g' pr.codecept.js
          ./node_modules/.bin/codeceptjs run-multiple parallel --steps --reporter mocha-multi -c pr.codecept.js --grep "${{ env.TAGS_FOR_TESTS }}"

      - name: Create status check
        if: ${{ always() }}
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          SHA: ${{ inputs.sha }}
          STATUS: ${{ job.status }}
        run: |
          result="${{ job.status }}"
          if [ "${STATUS}" = "cancelled" ]; then
            STATUS="error"
          fi
          gh api \
            --method POST \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/$REPO/statuses/$SHA \
            -f state="$STATUS" \
            -f target_url="https://github.com/$REPO/actions/runs/$RUN_ID" \
            -f description="pmm2-ui-tests e2e ${{ env.TAGS_FOR_TESTS }} tests $STATUS" \
            -f context='actions/workflows/ui-tests-e2e'
