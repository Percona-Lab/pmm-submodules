#!/bin/bash

set -o errexit
set -o xtrace

. $(dirname $0)/vars

prepare_specs() {
    local spec_name=$1
    local repo_name=$2

    cp ${rpmbuild_dir}/SPECS/${spec_name}.spec ${rpmbuild_dir}/SOURCES/${spec_name}.spec
    if [ -d "${root_dir}/sources/${repo_name}" ]; then
        local git_dir=$(dirname $(find "${root_dir}/sources/${repo_name}" -name .git | head -1))
        local full_commit=$(git -C "${git_dir}" rev-parse HEAD)
        local short_commit=${full_commit:0:7}

        sed -i -e "s/global commit.*/global commit ${full_commit}/" ${rpmbuild_dir}/SOURCES/${spec_name}.spec
        sed -i -e "s/Version:.*/Version: ${pmm_version}/"           ${rpmbuild_dir}/SOURCES/${spec_name}.spec

        if [ -f "${rpmbuild_dir}/SOURCES/${repo_name}-${short_commit}.tar.gz" ]; then
            echo SOURCES/${repo_name}-${short_commit}.tar.gz already exists, skipping build
        else
            git -C "${git_dir}" archive \
                --format=tar.gz \
                --prefix=${repo_name}-${full_commit}/ \
                -o ${rpmbuild_dir}/SOURCES/${repo_name}-${short_commit}.tar.gz \
                "${full_commit}"
        fi
    fi
}

update_grafana_node_modules() {
    echo "Docker image: ${rpmbuild_docker_image}"
    echo "PMM Version:  ${pmm_version}"
    docker run --rm -v ${rpmbuild_dir}/SOURCES:/home/builder/rpm/SOURCES ${rpmbuild_docker_image} sh -c "
        set -o errexit
        set -o xtrace
        sudo rpm -ev --nodeps nodejs npm
        sudo /usr/bin/curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -
        sudo yum clean all
        sudo yum -y install nodejs

        wget https://dl.google.com/go/go1.12.12.linux-amd64.tar.gz
        sudo tar -C /usr/local -xzf go1.12.12.linux-amd64.tar.gz
        sudo update-alternatives --install \"/usr/bin/go\" \"go\" \"/usr/local/go/bin/go\" 0
        sudo update-alternatives --set go /usr/local/go/bin/go
        sudo go version

        sudo npm --verbose install -g yarn
        rm -rf BUILD/grafana-*
        sudo chown builder:builder SOURCES/grafana-*
        rpmbuild --nodeps -bp SOURCES/grafana.spec || :
        pushd BUILD/grafana-*
        rm -rf node_modules
        yarn install --pure-lockfile --verbose
        cp package.json node_modules/
        tar -zcpf ../../SOURCES/grafana-node_modules-${pmm_version}.tar.gz node_modules
        for i in `find public/ -name *.rej`;do echo $i;cat $i;done;
        popd
    "
}

update_qan_node_modules() {
    docker run --rm -v ${rpmbuild_dir}:/home/builder/rpm -v ${rpms_dir}:/home/builder/rpm/RPMS ${rpmbuild_docker_image} sh -c "
        set -o errexit
        set -o xtrace

        rm -rf BUILD/qan-app-*
        rpmbuild --nodeps -bp SOURCES/percona-qan-app.spec || :
        pushd BUILD/qan-app-*
            rm -rf node_modules
            npm install
            cp package-lock.json package.json node_modules/
            tar -zcpf ../../SOURCES/qan-app-node_modules-${pmm_version}.tar.gz node_modules
        popd
    "
}

update_pmm_server_node_modules() {
    docker run --rm -v ${rpmbuild_dir}:/home/builder/rpm -v ${rpms_dir}:/home/builder/rpm/RPMS ${rpmbuild_docker_image} sh -c "
        set -o errexit
        set -o xtrace

        rm -rf BUILD/pmm-server-*
        sudo chown builder:builder SOURCES/qan-app-* SOURCES/pmm-server-*
        rpmbuild --nodeps -bp SOURCES/pmm-server.spec || :
        pushd BUILD/pmm-server-*/password-page
            rm -rf node_modules
            npm install
            cp package.json node_modules/
            tar -zcpf ../../../SOURCES/pmm-server-node_modules-${pmm_version}.tar.gz node_modules
        popd
    "
}

main() {
    #prepare_specs pmm-server pmm-server
    #update_pmm_server_node_modules
    #prepare_specs percona-qan-app qan-app
    #update_qan_node_modules
    prepare_specs grafana grafana
    update_grafana_node_modules
}

main
exit 0

# vim: expandtab shiftwidth=4 tabstop=4
